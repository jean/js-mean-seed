{"name":"js-mean-seed","tagline":"A starter project for MEAN (MongoDB, Express, Angular, Node)","body":"js-mean-seed [![Build Status](https://travis-ci.org/jseto/js-mean-seed.svg?branch=master)](https://travis-ci.org/jseto/js-mean-seed)\r\n============\r\n\r\n[![Deploy](https://www.herokucdn.com/deploy/button.png)](https://heroku.com/deploy)\r\n\r\nA starter project for MEAN (MongoDB, Express, Angular, Node).\r\nBased on [Angular][angular]'s [angular-seed](http://github.com/angular/angular-seed) for the front-end and [Loopback][loopback] for the back-end.\r\n    \r\nThis project is an application skeleton for a typical [AngularJS](http://angularjs.org/) web app, a [Loopback][loopback] server set-up and tools, a [Passport][passport] login set-up and a test framework for all the components. Additionally it takes benefit form [Bootstrap][bootstrap] responsive framework, [Font Awesome][fontawesome] font icons and [Less][less] CSS preprocessor and bundles [jsLib][jslib], an AngularJS widget library with a localization tool. Finally it is ready for [Travis CI][travis] continuous integration platform and deployment in [Heroku][heroku] cloud application platform.\r\n\r\n## Getting Started\r\n\r\nTo get you started you can simply [clone](http://github.com/jseto/js-mean-seed) the js-mean-seed repository and install the dependencies:\r\n\r\n### Prerequisites\r\n\r\nYou need git to clone the js-mean-seed repository. You can get git from\r\n[http://git-scm.com/][git].\r\n\r\nWe also use a number of node.js tools to initialize and test js-mean-seed. You must have node.js and\r\nits package manager (npm) installed.  You can get them from [http://nodejs.org/][node].\r\n\r\n### Clone js-mean-seed\r\n\r\nClone the js-mean-seed repository using [git][git]:\r\n\r\n```\r\ngit clone https://github.com/jseto/js-mean-seed.git\r\ncd js-mean-seed\r\n```\r\n\r\nIf you just want to start a new project without the js-mean-seed commit history then you can do:\r\n\r\n```bash\r\ngit clone --depth=1 https://github.com/jseto/js-mean-seed.git <your-project-name>\r\n```\r\n\r\nThe `depth=1` tells git to only pull down one commit worth of historical data.\r\n\r\n### Install StrongLoop \r\n\r\nStrongLoop provides a set of tools to make [Loopback][loopback] things easier. It particularly installs the `slc loopback` tool which helps in setting up new models and expose them in the REST API.\r\n\r\nYou should install StrongLoop as a generic node module in order to get access to 'slc' from the command line. To install StrongLoop:\r\n\r\n```\r\nnpm install -g strongloop\r\n```\r\n\r\nDuring installation, you may see a number of errors from node-gyp. These errors only prevent you from performing certain monitoring and management functions. Refer to [StronLoop](http://http://docs.strongloop.com/) if you are interested in those functions. \r\n\r\n### Install Dependencies\r\n\r\nWe have two kinds of dependencies in this project: tools and angular framework code.  The tools help\r\nus manage and test the application.\r\n\r\n* We get the tools we depend upon via `npm`, the [node package manager][npm].\r\n* We get the angular code via `bower`, a [client-side code package manager][bower].\r\n\r\nWe have preconfigured `npm` to automatically run `bower` so we can simply do:\r\n\r\n```\r\nnpm install\r\n```\r\n\r\nBehind the scenes this will also call `bower install`.  You should find that you have two new\r\nfolders in your project.\r\n\r\n* `node_modules` - contains the npm packages for the tools we need\r\n* `client/bower_components` - contains the angular framework files\r\n\r\n*Note that the `bower_components` folder would normally be installed in the root folder but\r\njs-mean-seed changes this location through the `.bowerrc` file.  Putting it in the client folder makes\r\nit easier to serve the files by a webserver.*\r\n\r\n### Run the Application\r\n\r\nWe have preconfigured the project with a web server.  The simplest way to start\r\nthis server is:\r\n\r\n```\r\nnpm start\r\n```\r\n\r\nNow browse to the app at `http://localhost:3000`.\r\n\r\nThis will start the webserver and leave it running in the background. To stop the server just\r\n\r\n```\r\nnpm stop\r\n```\r\n\r\n## Directory Layout\r\n\r\n```\r\nclient/             --> all of the source files for the application\r\n  auth/             --> sign up - sign in related files\r\n  images/           --> application images\r\n  locale/           --> application locale files\r\n  models/           --> generated model access services\r\n  views/            --> application views. Both partial and controller\r\n    contact/          --> in construction sample view\r\n      contact.html      --> partial for the view\r\n      contact.js        --> view controller\r\n    footer/           --> single page app footer\r\n      footer.html       --> partial for the view\r\n      footer.js         --> view controller\r\n    header/           --> single page app header \r\n      header.html       --> partial for the view\r\n      header.js         --> view controller\r\n    home/             --> single page app footer\r\n      home.html         --> partial for the view\r\n      home.js           --> view controller\r\n  app.js                --> main application module\r\n  index.html            --> app layout file (the main html template file of the app)\r\n  index-async.html      --> just like index.html, but loads js files asynchronously\r\ncommon/             --> common stuff for client and server\r\n  models/             --> generated model definition files\r\nless/               --> app less files\r\n  app.less            --> app custom css classes\r\nserver/             --> server side stuff\r\n  boot/               --> loopback boot files\r\n  *.json              --> loopback configuration files\r\n  server.js           --> server app main file\r\ntest/               --> test related stuff\r\n  client/             --> client spec files\r\n  server/             --> server spec files\r\n  karma.conf.js       --> config file for running unit tests with Karma\r\n  protractor.conf.js  --> Protractor config file\r\n.bowerrc            --> specifies where bower components will be installed\r\n.gitignore          --> files to ignore by git\r\n.jshintrc           --> jsHint conf file\r\n.travis.yml         --> Travis CI conf file\r\napp.json            --> app description for Heroku deploy button\r\nbower.json          --> bower components to install\r\npackage.json        --> node modules to install an scripts\r\nProcfile            --> Heroku conf file\r\nREADME.md           --> Documentation\r\n```\r\n\r\n## A MEAN seed without the M\r\n\r\nAs you know, MEAN stands for MongoDB, Express, AngularJS and NodeJS. We haven't talk about MongoDB and we will not talk because js-mean-seed is database agnostic. This is because we use the database abstraction provided by [Loopback][loopback]. Being database agnostic fully decouples the application logic from the database engine. Today you may think MongoDB is cool. Tomorrow? You never know.\r\n\r\n## Database\r\n\r\nAs said above, js-mean-seed is database agnostic. You can choose any of the available [Looback connectors](http://docs.strongloop.com/display/public/LB/Database+connectors). \r\n\r\nBy default, js-mean-seed, uses the Memory connector. Be aware that you will loose your data when working with the memory connector. If you want your data to persist, change the database connector or make [Memory connector persistent](http://docs.strongloop.com/display/public/LB/Memory+connector#Memoryconnector-Datapersistence)\r\n\r\n### Connecting to a database\r\n\r\nThe easy way. Use [StrongLoop Arc](http://docs.strongloop.com/display/ARC/StrongLoop+Arc). To invoke Arc\r\n\r\n```\r\nslc arc\r\n```\r\nAfter invoking Arc, a local web page will be opened. Select `Composer` and define your database.\r\n\r\n### Creating a new model\r\n\r\nThe easy way. Use [StrongLoop Arc](http://docs.strongloop.com/display/ARC/StrongLoop+Arc). To invoke Arc\r\n\r\n```\r\nslc arc\r\n```\r\n\r\nAfter invoking Arc, again a local web page will be opened. Select `Composer` and define your new model.\r\n\r\nOnce you have defined your model, you have to let AngularJS to know about the new model. To do that, invoke \r\n\r\n```\r\nnpm run build-ng-models\r\n```\r\n\r\nif you are using the client development tool, build-ng-models will be invoked automatically.\r\n\r\n### Use the models from AngularJS\r\n\r\nThe models are exposed to angular by running the `build-ng-models` tool. You can access the models in a similar way as you do with Angular's $resource service. For more information see [Loopback's Angular SDK](http://docs.strongloop.com/display/public/LB/AngularJS+JavaScript+SDK#AngularJSJavaScriptSDK-UsingtheSDK)\r\n\r\n## Testing\r\n\r\nThere are 3 kinds of tests in the js-mean-seed application: server Unit tests, client Unit tests and End to End tests.\r\nAll of them are written in [Jasmine][jasmine]\r\n\r\n### Running Unit Tests\r\n\r\nThe easiest way to run the unit tests is to use the supplied npm script:\r\n\r\n```\r\nnpm test\r\n```\r\n\r\n###Client Unit tests\r\n\r\nThe js-mean-seed app comes preconfigured with unit tests. These are written in\r\n[Jasmine][jasmine], which we run with the [Karma Test Runner][karma]. We provide a Karma\r\nconfiguration file to run them.\r\n\r\n* the configuration is found at `test/karma.conf.js`\r\n* the unit tests are found in the `test/client` folder with a similar structure as the code they are testing and are named as `*.spec.js`.\r\n\r\nto run this test alone just type\r\n\r\n```\r\nnpm run test:client\r\n```\r\n\r\nThis script will start the Karma test runner to execute the unit tests.\r\n\r\nIf you want to watch the source and test files for changes and then re-run the tests whenever any of them change, run \r\n\r\n```\r\nnpm run watch:test:client\r\n```\r\n\r\n### End to end testing\r\n\r\nThe js-mean-seed app comes with end-to-end tests, again written in [Jasmine][jasmine]. These tests\r\nare run with the [Protractor][protractor] End-to-End test runner.  It uses native events and has\r\nspecial features for Angular applications.\r\n\r\n* the configuration is found at `test/protractor-conf.js`\r\n* the e2e tests are found in the `test/client` folder with a similar structure as the code they are testing and are named as `*.e2e-spec.js`.\r\n\r\nProtractor simulates interaction with our web app and verifies that the application responds\r\ncorrectly. Therefore, our web server needs to be serving up the application, so that Protractor\r\ncan interact with it. If you run the provided nmp tasks you do not need to worry about that becase they automatically start the server\r\n\r\nYou can run the end-to-end tests alone using the supplied npm script:\r\n\r\n```\r\nnpm run test:e2e\r\n```\r\n\r\nThis script will execute the end-to-end tests against the application being hosted on the\r\ndevelopment server.\r\n\r\n### Server testing\r\n\r\nServer tests are run with the [jasmine-node][jasmine-node] test runner.\r\n\r\n*the server tests are found in the `test/server` folder and any javascript file there will be used as test file.\r\n\r\nto run this test alone just type\r\n\r\n```\r\nnpm run test:server\r\n```\r\n\r\nThis script will start the jasmine-node test runner to execute the unit tests.\r\n\r\nIf you want to watch the source and test files for changes and then re-run the tests whenever any of them change, run \r\n\r\n```\r\nnpm run watch:test:server\r\n```\r\n\r\n## Loading Angular Asynchronously\r\n\r\nThe js-mean-seed project supports loading the framework and application scripts asynchronously.  The\r\nspecial `index-async.html` is designed to support this style of loading.  For it to work you must\r\ninject a piece of Angular JavaScript into the HTML page.  The project has a predefined script to help\r\ndo this.\r\n\r\n```\r\nnpm run update-index-async\r\n```\r\n\r\nThis will copy the contents of the `angular-loader.js` library file into the `index-async.html` page.\r\nYou can run this every time you update the version of Angular that you are using.\r\n\r\n\r\n## Developing\r\n\r\nWe provide several tools to help in the app development phase. Basically are watchers, a browser re-loader and the server itself.\r\nAlthough you can change the behaviour of the server, the proposed configuration covers all the need you can have and we will focus on client side development. Anyway, if you want a server side development, just invoke the npm task\r\n\r\n```\r\nnpm run start:dev:server\r\n```\r\n\r\nthis task will star the test server watcher, the server test watcher and will keep an eye to the files located in the `server` folder. If a file change is detected the server will be restarted.\r\n\r\nWhen developing client side, which is the main effort you have to do in this environment, we provide a handy npm task\r\n\r\n```\r\nnpm run start:dev:client\r\n```\r\n\r\nthis task will start the server, the client unit test watcher and the less watcher.\r\n\r\nTo start both server and client development tools run the following task\r\n\r\n```\r\nnpm run start:dev:all\r\n```\r\n\r\nThe provided server uses [Instant][instant] to watch for the files it serves. Instant automatically injects a script-tag right before the closing body tag of any HTML page (including dynamic ones) in order to load the client code.\r\nWhenever a served page changes, Instant instruct to the browser to reload the page. This is a clever reloader solution. If `{ watch: false }` is passed as option or `$NODE_ENV` is set to `production` Instant will behave just like `connect.static()` with no additional overhead.\r\n\r\n### Running the App in Production\r\n\r\nSet the `$NODE_ENV` environment variable with the value `production`\r\n\r\n## Continuous Integration\r\n\r\n### Travis CI\r\n\r\n[Travis CI][travis] is a continuous integration service, which can monitor GitHub for new commits\r\nto your repository and execute scripts such as building the app or running tests. The js-mean-seed\r\nproject contains a Travis configuration file, `.travis.yml`, which will cause Travis to run your\r\ntests when you push to GitHub.\r\n\r\nYou will need to enable the integration between Travis and GitHub. See the Travis website for more\r\ninstruction on how to do this.\r\n\r\n## Deploy to Heroku\r\n\r\n[Heroku][heroku] is a cloud application platform. If you want to see this seed running in your Heroku account, just click the **Deploy to Heroku** button at the beginning of this document.\r\nThe js-mean-seed provides the `app.json` and `Procfile` files required by Heroku.\r\n\r\n### Contact, Contribute\r\n\r\nIf you want support, a new feature or find a bug open a [new issue](https://github.com/jseto/js-mean-seed/issues) in github.\r\nIf you want to contribute, just make a pull request with your new code.\r\n\r\n# License\r\n\r\n__js-mean-seed__ is distributed under the [MIT license](http://opensource.org/licenses/MIT)\r\n\r\n\r\n[git]: http://git-scm.com/\r\n[bower]: http://bower.io\r\n[npm]: https://www.npmjs.org/\r\n[node]: http://nodejs.org\r\n[protractor]: https://github.com/angular/protractor\r\n[jasmine]: http://jasmine.github.io\r\n[karma]: http://karma-runner.github.io\r\n[travis]: http://travis-ci.org/\r\n[loopback]: http://loopback.io/\r\n[angular]: http://angularjs.org\r\n[passport]: http://passportjs.org/\r\n[bootstrap]: http://getbootstrap.com/\r\n[fontawesome]: http://fortawesome.github.io/Font-Awesome/\r\n[heroku]: http://heroku.com\r\n[less]: http://lesscss.org\r\n[jslib]: http://github.com/jseto/jsLib\r\n[jasmine-node]: http://github.com/mhevery/jasmine-node\r\n[instant]: http://github.com/fgnass/instant","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}